{"version":3,"sources":["../src/collections/globals.ts","../src/utilities/url.ts","../src/collections/request.ts","../src/collections/networks.ts","../src/collections/tv.ts","../src/tmdb.ts"],"sourcesContent":["const apiBaseUrl = \"https://api.themoviedb.org\";\n\nexport { apiBaseUrl };\n","import path from \"path\";\n\nexport default class url extends URL {\n  constructor(input: string, base?: string | url) {\n    super(input, base);\n  }\n\n  appendPath(...pathname: string[]): void {\n    if (Array.isArray(pathname)) {\n      this.pathname = `${this.pathname}/${path.join(...pathname)}`;\n    }\n  }\n\n  public static createPath(...paths: string[]): string {\n    return path.join(...paths);\n  }\n}\n","import { apiBaseUrl } from \"./globals\";\nimport url from \"../utilities/url\";\n\nclass TMDbAPI {\n  protected static auth: string;\n  private static isToken: boolean;\n  protected _url: url = new url(apiBaseUrl);\n  /**\n   * Create a new TMDbAPI\n   * @param options The options to use for TMDb API access.\n   */\n  constructor(options: TMDbOptions) {\n    // Set the API auth method\n    if (options?.key) {\n      TMDbAPI.auth = options.key;\n      TMDbAPI.isToken = false;\n    } else if (options?.token) {\n      TMDbAPI.auth = options.token;\n      TMDbAPI.isToken = true;\n    } else {\n      throw new Error(\"An authorization key or token is required\");\n    }\n\n    // Set the primary API version to use\n    this._url = new url(\n      options?.version ? options.version.toString() : \"3\",\n      this._url,\n    );\n  }\n\n  /**\n   * Get the URL for the V4 API\n   * @returns The V4 TMDb API URL\n   */\n  get v4(): TMDbAPI {\n    const baseUrl = this._url.origin;\n    this._url = new url(\"4\", baseUrl);\n    return this;\n  }\n\n  private get url(): URL {\n    if (!TMDbAPI.isToken) {\n      this._url.searchParams.set(\"api_key\", TMDbAPI.auth);\n    }\n    return this._url;\n  }\n\n  request(\n    path?: string,\n    parameters?: Map<string, string> | null,\n    options?: RequestInit,\n  ): Promise<Response> {\n    const fetchOpts: RequestInit = { ...options };\n\n    // If using a token, set the Authorization header\n    if (TMDbAPI.isToken) {\n      fetchOpts.headers = {\n        ...fetchOpts.headers,\n        Authorization: `Bearer ${TMDbAPI.auth}`,\n      };\n    }\n\n    const url = this._url;\n    if (path) {\n      url.appendPath(path);\n    }\n\n    // Set the API parameters\n    if (parameters) {\n      for (const [param, val] of parameters) {\n        if (param === \"api_key\") continue;\n        url.searchParams.append(param, val);\n      }\n    }\n\n    return fetch(url.toString(), fetchOpts);\n  }\n\n  httpOptions(method: \"GET\" | \"PUT\" | \"POST\" | \"DELETE\" = \"GET\") {\n    return { method } as RequestInit;\n  }\n}\n\ninterface TMDbOptions {\n  /** API key. Must be used, unless using an access token. See `token`. */\n  key?: string;\n  /** Access token. Must be used, unless using API key. See `key`. */\n  token?: string;\n  /** Version of the API to use. If not provided, will default to `'v3'` */\n  version?: \"3\" | \"4\" | 3 | 4;\n}\n\nexport default TMDbAPI;\nexport { TMDbOptions };\n","import TMDbAPI, { TMDbOptions } from \"./request\";\n\nclass Networks extends TMDbAPI {\n  constructor(options: TMDbOptions) {\n    super(options);\n    this._url.appendPath(\"network\");\n  }\n\n  /**\n   * Get a network's details.\n   * @param networkId The ID of the network.\n   * @returns A Promise that resolves with the Network's detials\n   */\n  details(networkId: number): Promise<Details> {\n    return this.request(networkId.toString(), null, this.httpOptions()).then(\n      (response) => response.json(),\n    );\n  }\n\n  /**\n   * Get the alternative names of a network.\n   * @param networkId The ID of the network.\n   * @returns A Promise that resolved with the AlternativeNames.\n   */\n  alternativeNames(networkId: number): Promise<AlternativeNames> {\n    return this.request(networkId.toString(), null, this.httpOptions()).then(\n      (response) => response.json(),\n    );\n  }\n\n  /**\n   * Get the TV network logos by ID.\n   * @param networkId The ID of the network.\n   * @returns A Promise that resolves with the logos for a network.\n   */\n  images(networkId: number): Promise<Images> {\n    return this.request(networkId.toString(), null, this.httpOptions()).then(\n      (response) => response.json(),\n    );\n  }\n}\n\ninterface Details {\n  /** Where the network is located */\n  headquarters: string;\n  /** The URL homepage of a network */\n  homepage: string;\n  /** The network's TMDb ID */\n  id: number;\n  /** The TMDb path to the network's logo image */\n  logoPath: string;\n  /** The Network's name */\n  name: string;\n  /** The originating country for the network */\n  originCountry: string;\n}\n\ninterface AlternativeNames {\n  /** The network's TMDb ID */\n  id: number;\n  /** The network AN results */\n  results: {\n    name: string;\n    type: string;\n  }[];\n}\n\ninterface Images {\n  /** The network's TMDb ID */\n  id: number;\n  /** The logos used by this Network */\n  logos: {\n    aspectRatio: number;\n    filePath: string;\n    height: number;\n    id: string;\n    fileType: string;\n    voteAverage: number;\n    voteCount: number;\n    width: number;\n  }[];\n}\n\nexport default Networks;\n","import TMDbAPI, { TMDbOptions } from \"./request\";\n\nclass Series extends TMDbAPI {\n  constructor(options: TMDbOptions) {\n    super(options);\n    this._url.appendPath(\"tv\");\n  }\n\n  /**\n   * Get the details of a TV series.\n   * @param seriesId The ID of the series to get the details of.\n   * @param appendToResponse Other endpoints to include with this reponse. (20 items max.)\n   * @param language The language to use in the reponse. (Default is `en-US`.)\n   * @returns A Promise that resolves with the TV series details.\n   */\n  details(\n    seriesId: number,\n    appendToResponse?: string[],\n    language: string = \"en-US\",\n  ): Promise<Details> {\n    const options: RequestInit = {\n      method: \"POST\",\n    };\n\n    const qp = new Map<string, string>();\n    qp.set(\"language\", language);\n\n    if (appendToResponse && appendToResponse.length) {\n      appendToResponse = appendToResponse.slice(0, 20);\n      qp.set(\"append_to_response\", appendToResponse.join(\",\"));\n    }\n\n    return this.request(seriesId.toString(), qp, options).then((response) =>\n      response.json(),\n    );\n  }\n}\n\ninterface Details {\n  adult: boolean;\n  backdropPath: string;\n  createdBy: {\n    id: number;\n    creditId: number;\n    name: string;\n    gender: number;\n    profilePath: string;\n  }[];\n  episodeRunTime: number[];\n  firstAirDate: string;\n  genres: {\n    id: number;\n    name: string;\n  }[];\n  homepage: string;\n  id: number;\n  inProduction: boolean;\n  languages: string[];\n  lastAirDate: string;\n  lastEpisodeToAir: {\n    id: number;\n    name: string;\n    overview: string;\n    voteAverage: number;\n    voteCount: number;\n    airDate: string;\n    episodeNumber: number;\n    productionCode: string;\n    runtime: number;\n    seasonNumber: number;\n    showId: number;\n    stillPath: string;\n  };\n  name: string;\n  nextEpisodeToAir: string;\n  networks: {\n    id: number;\n    logoPath: string;\n    name: string;\n    originCountry: string;\n  }[];\n  numberOfEpisodes: number;\n  numberOfSeasons: number;\n  originCountry: string[];\n  originalLanguage: string;\n  originalName: string;\n  overview: string;\n  popularity: number;\n  posterPath: string;\n  productionCompanies: {\n    id: number;\n    logoPath: string;\n    name: string;\n    originCountry: string;\n  }[];\n  productionCountries: {\n    iso_3166_1: string;\n    name: string;\n  }[];\n  seasons: {\n    airDate: string;\n    episodeCount: number;\n    id: number;\n    name: string;\n    overview: string;\n    posterPath: string;\n    seasonNumber: number;\n    voteAverage: number;\n  }[];\n  spokenLanguages: {\n    englishName: string;\n    iso_639_1: string;\n    name: string;\n  }[];\n  status: string;\n  tagline: string;\n  type: string;\n  voteAverage: number;\n  voteCount: number;\n}\n\nexport { Series, Details };\n","import Networks from \"./collections/networks\";\nimport { TMDbOptions } from \"./collections/request\";\nimport * as tv from \"./collections/tv\";\n\nclass TMDb {\n  networks: Networks;\n  tvSeries: tv.Series;\n\n  constructor(apiAuth: string, apiVersion: \"3\" | \"4\" | 3 | 4 = \"3\") {\n    const options: TMDbOptions = {\n      version: apiVersion,\n    };\n    // use our best guess to determine if apiAuth is key or token...\n    // assume tokens will have '.'\n    if (apiAuth) {\n      if (apiAuth.includes(\".\")) {\n        options.token = apiAuth;\n      } else {\n        options.key = apiAuth;\n      }\n    } else {\n      throw new Error(\"A TMDb authentication key or token is required!\");\n    }\n\n    this.networks = new Networks(options);\n    this.tvSeries = new tv.Series(options);\n  }\n}\n\nexport default TMDb;\n"],"mappings":"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","names":["path","url"]}