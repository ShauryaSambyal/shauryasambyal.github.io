var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

// src/collections/globals.ts
var apiBaseUrl = "https://api.themoviedb.org";

// src/utilities/url.ts
import path from "path";
var url = class extends URL {
  constructor(input, base) {
    super(input, base);
  }
  appendPath(...pathname) {
    if (Array.isArray(pathname)) {
      this.pathname = `${this.pathname}/${path.join(...pathname)}`;
    }
  }
  static createPath(...paths) {
    return path.join(...paths);
  }
};

// src/collections/request.ts
var TMDbAPI = class _TMDbAPI {
  /**
   * Create a new TMDbAPI
   * @param options The options to use for TMDb API access.
   */
  constructor(options) {
    this._url = new url(apiBaseUrl);
    if (options == null ? void 0 : options.key) {
      _TMDbAPI.auth = options.key;
      _TMDbAPI.isToken = false;
    } else if (options == null ? void 0 : options.token) {
      _TMDbAPI.auth = options.token;
      _TMDbAPI.isToken = true;
    } else {
      throw new Error("An authorization key or token is required");
    }
    this._url = new url(
      (options == null ? void 0 : options.version) ? options.version.toString() : "3",
      this._url
    );
  }
  /**
   * Get the URL for the V4 API
   * @returns The V4 TMDb API URL
   */
  get v4() {
    const baseUrl = this._url.origin;
    this._url = new url("4", baseUrl);
    return this;
  }
  get url() {
    if (!_TMDbAPI.isToken) {
      this._url.searchParams.set("api_key", _TMDbAPI.auth);
    }
    return this._url;
  }
  request(path2, parameters, options) {
    const fetchOpts = __spreadValues({}, options);
    if (_TMDbAPI.isToken) {
      fetchOpts.headers = __spreadProps(__spreadValues({}, fetchOpts.headers), {
        Authorization: `Bearer ${_TMDbAPI.auth}`
      });
    }
    const url2 = this._url;
    if (path2) {
      url2.appendPath(path2);
    }
    if (parameters) {
      for (const [param, val] of parameters) {
        if (param === "api_key")
          continue;
        url2.searchParams.append(param, val);
      }
    }
    return fetch(url2.toString(), fetchOpts);
  }
  httpOptions(method = "GET") {
    return { method };
  }
};
var request_default = TMDbAPI;

// src/collections/networks.ts
var Networks = class extends request_default {
  constructor(options) {
    super(options);
    this._url.appendPath("network");
  }
  /**
   * Get a network's details.
   * @param networkId The ID of the network.
   * @returns A Promise that resolves with the Network's detials
   */
  details(networkId) {
    return this.request(networkId.toString(), null, this.httpOptions()).then(
      (response) => response.json()
    );
  }
  /**
   * Get the alternative names of a network.
   * @param networkId The ID of the network.
   * @returns A Promise that resolved with the AlternativeNames.
   */
  alternativeNames(networkId) {
    return this.request(networkId.toString(), null, this.httpOptions()).then(
      (response) => response.json()
    );
  }
  /**
   * Get the TV network logos by ID.
   * @param networkId The ID of the network.
   * @returns A Promise that resolves with the logos for a network.
   */
  images(networkId) {
    return this.request(networkId.toString(), null, this.httpOptions()).then(
      (response) => response.json()
    );
  }
};
var networks_default = Networks;

// src/collections/tv.ts
var Series = class extends request_default {
  constructor(options) {
    super(options);
    this._url.appendPath("tv");
  }
  /**
   * Get the details of a TV series.
   * @param seriesId The ID of the series to get the details of.
   * @param appendToResponse Other endpoints to include with this reponse. (20 items max.)
   * @param language The language to use in the reponse. (Default is `en-US`.)
   * @returns A Promise that resolves with the TV series details.
   */
  details(seriesId, appendToResponse, language = "en-US") {
    const options = {
      method: "POST"
    };
    const qp = /* @__PURE__ */ new Map();
    qp.set("language", language);
    if (appendToResponse && appendToResponse.length) {
      appendToResponse = appendToResponse.slice(0, 20);
      qp.set("append_to_response", appendToResponse.join(","));
    }
    return this.request(seriesId.toString(), qp, options).then(
      (response) => response.json()
    );
  }
};

// src/tmdb.ts
var TMDb = class {
  constructor(apiAuth, apiVersion = "3") {
    const options = {
      version: apiVersion
    };
    if (apiAuth) {
      if (apiAuth.includes(".")) {
        options.token = apiAuth;
      } else {
        options.key = apiAuth;
      }
    } else {
      throw new Error("A TMDb authentication key or token is required!");
    }
    this.networks = new networks_default(options);
    this.tvSeries = new Series(options);
  }
};
var tmdb_default = TMDb;
export {
  tmdb_default as default
};
//# sourceMappingURL=tmdb.mjs.map