declare class url extends URL {
    constructor(input: string, base?: string | url);
    appendPath(...pathname: string[]): void;
    static createPath(...paths: string[]): string;
}

declare class TMDbAPI {
    protected static auth: string;
    private static isToken;
    protected _url: url;
    /**
     * Create a new TMDbAPI
     * @param options The options to use for TMDb API access.
     */
    constructor(options: TMDbOptions);
    /**
     * Get the URL for the V4 API
     * @returns The V4 TMDb API URL
     */
    get v4(): TMDbAPI;
    private get url();
    request(path?: string, parameters?: Map<string, string> | null, options?: RequestInit): Promise<Response>;
    httpOptions(method?: "GET" | "PUT" | "POST" | "DELETE"): RequestInit;
}
interface TMDbOptions {
    /** API key. Must be used, unless using an access token. See `token`. */
    key?: string;
    /** Access token. Must be used, unless using API key. See `key`. */
    token?: string;
    /** Version of the API to use. If not provided, will default to `'v3'` */
    version?: "3" | "4" | 3 | 4;
}

declare class Networks extends TMDbAPI {
    constructor(options: TMDbOptions);
    /**
     * Get a network's details.
     * @param networkId The ID of the network.
     * @returns A Promise that resolves with the Network's detials
     */
    details(networkId: number): Promise<Details$1>;
    /**
     * Get the alternative names of a network.
     * @param networkId The ID of the network.
     * @returns A Promise that resolved with the AlternativeNames.
     */
    alternativeNames(networkId: number): Promise<AlternativeNames>;
    /**
     * Get the TV network logos by ID.
     * @param networkId The ID of the network.
     * @returns A Promise that resolves with the logos for a network.
     */
    images(networkId: number): Promise<Images>;
}
interface Details$1 {
    /** Where the network is located */
    headquarters: string;
    /** The URL homepage of a network */
    homepage: string;
    /** The network's TMDb ID */
    id: number;
    /** The TMDb path to the network's logo image */
    logoPath: string;
    /** The Network's name */
    name: string;
    /** The originating country for the network */
    originCountry: string;
}
interface AlternativeNames {
    /** The network's TMDb ID */
    id: number;
    /** The network AN results */
    results: {
        name: string;
        type: string;
    }[];
}
interface Images {
    /** The network's TMDb ID */
    id: number;
    /** The logos used by this Network */
    logos: {
        aspectRatio: number;
        filePath: string;
        height: number;
        id: string;
        fileType: string;
        voteAverage: number;
        voteCount: number;
        width: number;
    }[];
}

declare class Series extends TMDbAPI {
    constructor(options: TMDbOptions);
    /**
     * Get the details of a TV series.
     * @param seriesId The ID of the series to get the details of.
     * @param appendToResponse Other endpoints to include with this reponse. (20 items max.)
     * @param language The language to use in the reponse. (Default is `en-US`.)
     * @returns A Promise that resolves with the TV series details.
     */
    details(seriesId: number, appendToResponse?: string[], language?: string): Promise<Details>;
}
interface Details {
    adult: boolean;
    backdropPath: string;
    createdBy: {
        id: number;
        creditId: number;
        name: string;
        gender: number;
        profilePath: string;
    }[];
    episodeRunTime: number[];
    firstAirDate: string;
    genres: {
        id: number;
        name: string;
    }[];
    homepage: string;
    id: number;
    inProduction: boolean;
    languages: string[];
    lastAirDate: string;
    lastEpisodeToAir: {
        id: number;
        name: string;
        overview: string;
        voteAverage: number;
        voteCount: number;
        airDate: string;
        episodeNumber: number;
        productionCode: string;
        runtime: number;
        seasonNumber: number;
        showId: number;
        stillPath: string;
    };
    name: string;
    nextEpisodeToAir: string;
    networks: {
        id: number;
        logoPath: string;
        name: string;
        originCountry: string;
    }[];
    numberOfEpisodes: number;
    numberOfSeasons: number;
    originCountry: string[];
    originalLanguage: string;
    originalName: string;
    overview: string;
    popularity: number;
    posterPath: string;
    productionCompanies: {
        id: number;
        logoPath: string;
        name: string;
        originCountry: string;
    }[];
    productionCountries: {
        iso_3166_1: string;
        name: string;
    }[];
    seasons: {
        airDate: string;
        episodeCount: number;
        id: number;
        name: string;
        overview: string;
        posterPath: string;
        seasonNumber: number;
        voteAverage: number;
    }[];
    spokenLanguages: {
        englishName: string;
        iso_639_1: string;
        name: string;
    }[];
    status: string;
    tagline: string;
    type: string;
    voteAverage: number;
    voteCount: number;
}

declare class TMDb {
    networks: Networks;
    tvSeries: Series;
    constructor(apiAuth: string, apiVersion?: "3" | "4" | 3 | 4);
}

export { TMDb as default };
